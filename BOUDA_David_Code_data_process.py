# -*- coding: utf-8 -*-
"""Data_Process.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wVt704P0ALp7yonqqSvRcIjB_h1hN9Gf

#Importer les données
"""

import pandas as pd
data = pd.read_csv('BF.txt', sep='\t',header=None)
print(data.head())

"""#Renommer les colonnes"""

data.columns

data = data.rename(columns={
    0: 'geonameid',
    1: 'name',
    2: 'asciiname',
    3: 'alternatenames',
    4: 'latitude',
    5: 'longitude',
    6: 'feature class',
    7: 'feature code',
    8: 'country code',
    9: 'cc2',
    10: 'code admin1',
    11: 'code admin2',
    12: 'admin3 code',
    13: 'admin4 code',
    14: 'population',
    15: 'elevation',
    16: 'dem',
    17: 'timezone',
    18: 'modification date'
})

data.head()

"""#Identifiants, Noms de lieux, latitudes, longitudes"""

colonne_supprimer=['asciiname','alternatenames','feature class','feature code','country code','cc2','code admin1','code admin2','admin3 code','admin4 code','population','elevation','dem','timezone','modification date']

data=data.drop(colonne_supprimer,axis=1)

data

"""#Renommez les avec les noms suivants : 'ID', 'location_name', 'lat', 'long'"""

data = data.rename(columns={
    'geonameid': 'ID',
    'name': 'location_name',
    'latitude': 'lat',
    'longitude': 'long',
})

data.head()

"""#Sauvegarder ces données dans un fichier CSV, nommez-le burkina_location.csv"""

data.to_csv('burkina_location.csv', index=False)

"""#Opérations sur le fichier CSV burkina_location.csv.

"""

data2 = pd.read_csv('burkina_location.csv')

data2

"""#Extraire les données contenant le mot 'gounghin'"""

# Extraire les données contenant le nom 'gounghin'
gounghin_data = data2[data2['location_name'].str.contains('gounghin', case=False, na=False)]

# Enregistrer les données extraites sous le fichier gounghin.csv
gounghin_data.to_csv('gounghin.csv', index=False)

gounghin_data

# Extraire la sous-partie de la base de données dont les noms commencent par les lettres entre 'A' et 'P'
A_P_data = data2[data2['location_name'].str[0].between('A', 'P')]
A_P_data = A_P_data.sort_values(by='location_name')
A_P_data

len(A_P_data)

A_P_data.to_csv('A_to_P.csv', index=False)

"""#Identifiez respectivement, la latitude, la longitude minimale et les noms de lieux correspondants"""

data2=A_P_data

data2

# Identifier la latitude minimale
min_latitude = data2['lat'].min()
print("La latitude minimale est :",min_latitude)

# Identifier la longitude minimale
min_longitude = data2['long'].min()
print("La longitude minimale est :",min_longitude)

# Filtrer le DataFrame pour obtenir les données correspondant à la latitude minimale
min_lat_data = data2[data2['lat'] == min_latitude]
# Obtenir le nom du lieu correspondant à la latitude minimale
min_lat_name = min_lat_data['location_name'].iloc[0]

# Filtrer le DataFrame pour obtenir les données correspondant à la longitude minimale
min_long_data = data2[data2['long'] == min_longitude]
# Obtenir le nom du lieu correspondant à la longitude minimale
min_long_name = min_long_data['location_name'].iloc[0]

# Afficher les noms des lieux correspondants
print("Nom du lieu avec latitude minimale :", min_lat_name)
print("Nom du lieu avec longitude minimale :", min_long_name)

"""#les lieux dont les coordonnées sont comprises entre (lat >= 11 et lon <= 0.5)"""

# Filtrer les lieux dont les coordonnées sont comprises entre (lat >= 11 et lon <= 0.5)
data_lat_long = data2[(data2['lat'] >= 11) & (data2['long'] <= 0.5)]
data_lat_long

data_lat_long['long'].max()

data_lat_long['lat'].min()

#data2.to_csv('A_to_P.csv', index=False)